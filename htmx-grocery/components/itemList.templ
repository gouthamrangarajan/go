package components

import (
	"fmt"
	"strconv"
	"strings"
)

templ itemsUL(items []Item) {
	<ul class="flex flex-col gap-1">
		for _, item := range items {
			@itemLi(item)
		}
	</ul>
}

templ openAiSuggestions(concatenatedSuggestion string, isOob bool) {
	if strings.Trim(concatenatedSuggestion,"")=="" {
		if isOob {
			<p id="openaiSuggestion" style="view-transition-name:openaiSuggestion" hx-swap-oob="true"></p>
		} else {
			<p id="openaiSuggestion" style="view-transition-name:openaiSuggestion"></p>
		}
	} else {
		{{ suggestions := strings.Split(concatenatedSuggestion, ",") }}
		if isOob {
			<p
				id="openaiSuggestion"
				style="view-transition-name:openaiSuggestion"
				class="py-2 px-4 flex flex-col text-lg"
				hx-swap-oob="true"
			>
				<span class="italic text-slate-600">* Open AI suggestions click on the item to populate</span>
				<span class="flex gap-1">
					for idx,suggestion := range suggestions {
						<a
							href="#"
							class="apperance-none outline-none cursor-pointer transition duration-300 text-slate-800 hover:opacity-90 focus:underline focus:underline-offset-4"
							onclick={ templ.JSFuncCall("setAlpineStoreNewItemValue", templ.JSExpression("event"), suggestion) }
						>{ strings.Trim(suggestion,"") }</a>
						if idx+1<len(suggestions) {
							<span>,</span>
						}
					}
				</span>
				<input type="hidden" name="suggestions" value={ concatenatedSuggestion }/>
			</p>
		} else {
			<p
				id="openaiSuggestion"
				style="view-transition-name:openaiSuggestion"
				class="py-2 px-4 flex flex-col text-lg"
			>
				<span class="italic text-slate-600">* Open AI suggestions click on the item to populate</span>
				<span class="flex gap-1">
					for idx,suggestion := range suggestions {
						<a
							href="#"
							class="apperance-none outline-none cursor-pointer text-slate-800 hover:opacity-90 focus:underline focus:underline-offset-4"
							onclick={ templ.JSFuncCall("setAlpineStoreNewItemValue", templ.JSExpression("event"), suggestion) }
						>{ strings.Trim(suggestion,"") }</a>
						if idx+1<len(suggestions) {
							<span>,</span>
						}
					}
				</span>
				<input type="hidden" name="suggestions" value={ concatenatedSuggestion }/>
			</p>
		}
	}
}

templ OpenAiSuggestionsAndItemsUl(items []Item, concatenatedSuggestion string, isSuggestionOob bool) {
	@openAiSuggestions(concatenatedSuggestion, isSuggestionOob)
	@itemsUL(items)
}

templ itemLi(item Item) {
	<li
		class={ "bg-slate-100 py-1 px-3 rounded flex gap-1 items-center w-full text-slate-800 ",item.AnimationClass }
		style={ getLiTransitionName(item.Id) }
	>
		@itemCompletedToggleCheckbox(item)
		@ItemNameDisplay(item)
		@decreaseQuantityForm(item.Id, item.Quantity)
		@ItemQuantityDisplay(item.Id, item.Quantity, false)
		@increaseQuantityForm(item.Id, item.Quantity)
		@deleteItemForm(item.Id)
	</li>
}

func getLiTransitionName(id int) string {
	return fmt.Sprintf("view-transition-name:item-%v", id)
}

templ ItemNameDisplay(item Item) {
	if item.Completed {
		<span class="flex-1 line-through text-2xl" style={ getDisplayNameTransitionName(item.Id) }>{ item.Name }</span>
	} else {
		<span class="flex-1 text-2xl" style={ getDisplayNameTransitionName(item.Id) }>{ item.Name }</span>
	}
}

func getDisplayNameTransitionName(id int) string {
	return fmt.Sprintf("view-transition-name:item-name-%v", id)
}

templ ItemQuantityDisplay(id int, quantity int, isOob bool) {
	if !isOob {
		<span class="w-5 text-center select-none" style={ getDisplayQuantityTransitionName(id) }>{ strconv.Itoa(quantity) }</span>
	} else {
		<span class="w-5 text-center select-none" style={ getDisplayQuantityTransitionName(id) }>{ strconv.Itoa(quantity) }</span>
		<input
			type="hidden"
			value={ strconv.Itoa(quantity) }
			name="currentQuantity"
			id={ fmt.Sprintf("inpQuantity_increment_%v", id) }
			hx-swap-oob="true"
		/>
		<input
			type="hidden"
			value={ strconv.Itoa(quantity) }
			name="currentQuantity"
			id={ fmt.Sprintf("inpQuantity_decrement_%v", id) }
			hx-swap-oob="true"
		/>
	}
}

func getDisplayQuantityTransitionName(id int) string {
	return fmt.Sprintf("view-transition-name:item-quantity-%v", id)
}
