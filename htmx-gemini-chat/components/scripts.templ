package components

var onceHandle = templ.NewOnceHandle()

templ bodyScript() {
	@onceHandle.Once() {
		<script type="text/javascript">            
            function addErrorMessage(message){
                if(document.startViewTransition){
                    document.startViewTransition(()=>{
                        Alpine.store('data').errorMessages.push(message);
                    });
                }
                else{
                    Alpine.store('data').errorMessages.push(message);
                }
                setTimeout(()=>{
                    if(document.startViewTransition){
                        document.startViewTransition(()=>{
                            Alpine.store('data').errorMessages.splice(0,1);
                        });
                    }else{
                         Alpine.store('data').errorMessages.splice(0,1);
                    }
                },3000);
            }              
            document.addEventListener('DOMContentLoaded', function() {                
                domContentLoadedEvent();                    
            });
            function domContentLoadedEvent() {                
                document.querySelectorAll('zero-md').forEach(function(el) {                                      
                    el.addEventListener('zero-md-rendered', function() {      
                        if(document.startViewTransition){
                            document.startViewTransition(()=>{
                                if(el.parentElement.parentElement.classList.contains("hidden")){
                                    el.parentElement.parentElement.classList.replace("hidden","flex");
                                } else if(el.parentElement.parentElement.parentElement.classList.contains("hidden")){
                                    el.parentElement.parentElement.parentElement.classList.replace("hidden","flex");
                                }
                            });
                        }
                        else{                     
                            if(el.parentElement.parentElement.classList.contains("hidden")){
                                el.parentElement.parentElement.classList.replace("hidden","flex");
                            } else if(el.parentElement.parentElement.parentElement.classList.contains("hidden")){
                                el.parentElement.parentElement.parentElement.classList.replace("hidden","flex");
                            }
                        }
                    });
                                      
                    //Below is doubtful and never called
                    // el.addEventListener('zero-md-error', function() {                          
                    //     if(el.parentElement.parentElement.classList.contains("hidden")){
                    //         el.parentElement.parentElement.classList.replace("hidden","flex");
                    //     }else if(el.parentElement.parentElement.parentElement.classList.contains("hidden")){
                    //         el.parentElement.parentElement.parentElement.classList.replace("hidden","flex");
                    //     }
                    // });
                });
            }
            document.body.addEventListener('htmx:afterSwap', function(event) {	
                if(Alpine.store('data').addNewChatSessionProcessing){
                    Alpine.store('data').addNewChatSessionProcessing=false;
                    const newChatSessionId=document.getElementById("chatSessionId").value;
                    window.history.replaceState({},document.title,window.location.origin+"/"+newChatSessionId);                     
                } else if(Alpine.store('data').fullPageFetchProcessing){
                    Alpine.store('data').fullPageFetchProcessing=false;
                    domContentLoadedEvent();
                }
                else{   
                    const chatSessionId=document.getElementById("chatSessionId").value;
                    const chatSessionIdParsed=parseInt(chatSessionId);                    
                     if(!window.location.pathname.endsWith("/"+chatSessionId)){
                        if(isNaN(chatSessionIdParsed) || chatSessionIdParsed==0){
                            window.history.replaceState({},document.title,window.location.origin);                     
                        }
                        else {
                            window.history.replaceState({},document.title,window.location.origin+"/"+chatSessionId); 
                            domContentLoadedEvent();                    
                        }  
                     }
                }            					
            });    
            document.body.addEventListener('htmx:afterRequest', function(event) {	
                if(event.detail.failed){
                    addErrorMessage('Error! Please try again later'); 
                    if(Alpine.store('data').addNewChatSessionProcessing){
                       Alpine.store('data').addNewChatSessionProcessing=false;                                                      
                    }	
                    if(Alpine.store('data').fullPageFetchProcessing){
                       Alpine.store('data').fullPageFetchProcessing=false;                                                      
                    }	                    
                }
                if(Alpine.store('data').deleteChatSessionProcessing){
                    Alpine.store('data').deleteChatSessionProcessing=false;                                                      
                }	
            });
            document.body.addEventListener('htmx:confirm', function(evt) {                
                const msg=evt.target.getAttribute('hx-confirm');
                if(msg){
                  evt.preventDefault();
                  const confirmationResult=window.confirm(msg);
                  if(confirmationResult){
                    evt.detail.issueRequest(true)
                  }
                  else if(Alpine.store('data').deleteChatSessionProcessing){
                    Alpine.store('data').deleteChatSessionProcessing=false;                                                      
                  }
                }
            });
           
            document.addEventListener('alpine:init', () => {                
                Alpine.store('data',{
                    addNewChatSessionProcessing:false,
                    deleteChatSessionProcessing:false,
                    fullPageFetchProcessing:false,                    
                    promptProcessing:false,
                    currentMessageId:-1,
                    menuOpen:false,
                    errorMessages:[],
                    openMenu(){                        
                        this.menuOpen=true;
                        htmx.process(document.getElementsByTagName('aside')[0]);
                    },
                    closeMenu(){                      
                        this.menuOpen=false;
                    },
                    sendFullPageFetchEvent(ev,eventNameToDispatch){
                        ev.preventDefault();          
                        if( ev?.currentTarget?.href &&
                            ev.currentTarget.href.endsWith("/"+document.getElementById("chatSessionId").value))
                        {
                            return;
                        }                
                        this.fullPageFetchProcessing=true;
                        this.closeMenu();                        
                        if(eventNameToDispatch){                                  
                            ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));
                        }                        
                        
                    },
                    checkAndSetAddNewProcessing(ev,eventNameToDispatch){
                        ev.preventDefault();
                        if(!this.addNewChatSessionProcessing){
                            this.addNewChatSessionProcessing=true;
                            if(eventNameToDispatch){
                                ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));
                            }
                        }
                    },
                    checkAndSetDeleteProcessing(ev,eventNameToDispatch){
                        ev.preventDefault();
                        if(!this.deleteChatSessionProcessing){
                            this.deleteChatSessionProcessing=true;
                            if(eventNameToDispatch){
                                ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));
                            }
                        }
                    },                    
                });
                Alpine.data('chatInput',()=>({
                    prompt:'',
                    imgBase64:"",
                    fileName:"",  
                    abortController:new AbortController(),         
                    init(){
                        this.$watch('$store.data.fullPageFetchProcessing',(val)=>{
                            if(val){
                                this.checkAndAbortStreaming();
                            }
                        }),
                        this.$watch('$store.data.addNewChatSessionProcessing',(val)=>{
                            if(val){
                                this.checkAndAbortStreaming();
                            }
                        }),
                        this.$watch('$store.data.deleteChatSessionProcessing',(val)=>{                            
                            if(val){
                                const chatSessionId=document.getElementById("chatSessionId").value;
                                if(window.location.pathname.endsWith("/"+chatSessionId)){
                                    this.checkAndAbortStreaming();
                                }else{
                                    const firstMenu=document.getElementsByClassName("menu")[0]
                                    if(firstMenu && firstMenu.id.endsWith("_"+chatSessionId)){                                        
                                        this.checkAndAbortStreaming();
                                    }
                                }
                            }
                        })
                    },                          
                    checkAndAbortStreaming(){
                        if(this.$store.data.promptProcessing){
                            this.abortController.abort();
                            this.abortController=new AbortController();
                            this.setProcessing(false);
                        }
                    },             
                    setProcessing(val){
                        if(document.startViewTransition){
                            document.startViewTransition(()=>{
                                this.$store.data.promptProcessing=val;                                
                            })
                        }
                        else{
                            this.$store.data.promptProcessing=val;                            
                        }
                    },                                        
                    fileInputChanged(ev){
                        const fl=ev.currentTarget.files[0];
                        const reader = new FileReader();
                        reader.addEventListener("load",() => {
                            if (typeof reader.result == "string") {
                                if(reader.result.startsWith("data:image/")){
                                    this.imgBase64=reader.result;
                                    this.fileName=fl.name;
                                }else{
                                    addErrorMessage('Please select a valid image file')
                                }
                            }
                        });
                        if (fl.size <= 1024 * 1024) {//1 mb
                            reader.readAsDataURL(fl);
                        }else{
                            addErrorMessage('Image size exceeds the limit of 1 MB');                                 
                        }
                    },
                    clearFileInput(){         
                        if(document.startViewTransition){
                            document.startViewTransition(()=>{
                                this.imgBase64='';
                                this.fileName=''; 
                            });
                        }               
                        else{
                            this.imgBase64='';
                            this.fileName=''; 
                        }                        
                        this.$refs.imageInput.value=''
                    },
                    async submitMessage(ev,idToAppendData){
                        if(!ev.shiftKey && this.prompt.trim()!='' && !this.$store.data.promptProcessing){
                            this.setProcessing(true);
                            const fm=new FormData();
                            fm.append("prompt",this.prompt);
                            fm.append("imgBase64",this.imgBase64)
                            fm.append("chatSessionId",document.getElementById("chatSessionId").value);                                                        
                            try{
                                let decodedValueMerged ="";                                
                                const resp= await fetch('/send',{
                                    body:fm,
                                    method:"POST",  
                                    signal:this.abortController.signal,                              
                                });                        
                                if(!resp.ok){
                                    this.setProcessing(false);
                                    addErrorMessage('Error! Please try again later');     
                                    return;
                                }                                   
                                const reader = resp.body.getReader();
                                const textDecoder=new TextDecoder();                                                                 
                                while (true){
                                    const { done, value } = await reader.read();
                                    if(done){//streaming end
                                        this.setProcessing(false);
                                        this.$store.data.currentMessageId=-1;
                                        decodedValueMerged="";
                                        break;
                                    }
                                    const decodedValue = textDecoder.decode(value);     
                                    decodedValue.split('event: ').forEach((decodedItem)=>{
                                        if(decodedItem.trim()==''){
                                            return;
                                        }
                                        if(decodedItem.includes("END\n\n")){
                                            this.setProcessing(false);
                                            this.$store.data.currentMessageId=-1;
                                            decodedValueMerged="";                                                                                
                                            return;
                                        }
                                        else if(decodedItem.includes("ERROR\n\n")){
                                            this.setProcessing(false);
                                            this.$store.data.currentMessageId=-1;
                                            decodedValueMerged="";                                        
                                            addErrorMessage('Error! Please try again later');     
                                            return;
                                        }
                                        else if(decodedItem.includes("GEMINI_MESSAGE_TEMPLATE") || 
                                            decodedItem.includes("USER_MESSAGE_TEMPLATE") 
                                            ){ //streamed output is a new user message item or new gemini message item                                        
                                            decodedItem=decodedItem.replace("GEMINI_MESSAGE_TEMPLATE\ndata: ","").replace("USER_MESSAGE_TEMPLATE\ndata: ","").trimEnd();
                                            this.$store.data.currentMessageId = createNewMessageUIAndGetMessageId(idToAppendData,decodedItem);                                                                                 
                                            decodedValueMerged="";                                           
                                            if(this.prompt!=''){ //streamed output is user message 
                                                this.appendPromptAndImageToUserMessageTemplate()                                                                   
                                            }
                                            document.getElementsByTagName('main')[0].scrollTop=document.getElementsByTagName('main')[0].scrollHeight+100;                         
                                        }
                                        else if(decodedItem.includes("MENU_ITEM")){ //streamed output is new menu item or existing menu title change 
                                            decodedItem=decodedItem.replace("MENU_ITEM\ndata: ","").trimEnd();
                                            upsertMenuUIWithMenuItem(decodedItem);  
                                        }
                                        else if(decodedItem.includes("CHAT_SESSION_ID_INPUT")){ //chat session id intput
                                            decodedItem=decodedItem.replace("CHAT_SESSION_ID_INPUT\ndata: ","").trimEnd();
                                            document.getElementById('chatSessionId').outerHTML=decodedItem;                                        
                                        }
                                        else if(decodedItem.includes("MESSAGE")){ //streamed output is gemini message that needs to be appended to existing message                                         
                                            decodedItem=decodedItem.replace("MESSAGE\ndata: ",""); //no trim end required , if added will remove \n coming in data also
                                            decodedValueMerged += decodedItem;                                                 
                                            document.getElementById('message_'+this.$store.data.currentMessageId).innerHTML = decodedValueMerged;   
                                        }              
                                    });                                                                                                                                                                                                                                                                          
                                }
                        
                            }
                            catch(err){
                                console.log(err);
                                this.setProcessing(false);
                                if (err?.name !== 'AbortError') {
                                    addErrorMessage('Error! Please try again later');     
                                }
                            }                            
                        }
                    },
                    appendPromptAndImageToUserMessageTemplate(){                    
                        document.getElementById('message_'+this.$store.data.currentMessageId).innerHTML = this.prompt;  
                        this.prompt='';
                        if(this.imgBase64!=""){// streamed output is based on image input so prepend Img
                            prependImageToUserMessage(this.$store.data.currentMessageId,this.imgBase64)
                            this.clearFileInput();
                        } 
                    }                                  
                }));                               
            });             
            function createNewMessageUIAndGetMessageId(idToAppendHTML,messageUI){                
                const divEl=document.createElement("div");
                document.getElementById(idToAppendHTML).appendChild(divEl);
                divEl.outerHTML=messageUI;                                
                const strtIdx=messageUI.indexOf("message_");
                if (strtIdx==-1){                   
                    return -1;
                }
                const messageId=messageUI.substring(strtIdx+"message_".length,messageUI.indexOf('"',strtIdx));                
                return messageId;
            }
            function prependImageToUserMessage(messageId,imgBase64){
               const elToPrependImg= document.getElementById("message_"+messageId).parentElement.parentElement;
               const imgEl=document.createElement("img")
               imgEl.classList.add("w-full", "h-full")
               imgEl.src=imgBase64        
               elToPrependImg.prepend(imgEl);              
            }
            function upsertMenuUIWithMenuItem(menuItemUI){
                const strtIdx=menuItemUI.indexOf("li_");
                const elId=menuItemUI.substring(strtIdx,menuItemUI.indexOf('"',strtIdx));
                const el=document.getElementById(elId);
                if(el){//title change
                    if(document.startViewTransition){
                        document.startViewTransition(()=>{
                            el.outerHTML=menuItemUI;
                        });
                    }else{
                        el.outerHTML=menuItemUI;
                    }
                }else{//new menu item
                    const liEl=document.createElement("li");
                    document.getElementById('ul_menu').appendChild(liEl);
                    liEl.outerHTML=menuItemUI;
                    liEl.classList.remove('animate-scale-y');                                        
                }   
                htmx.process(document.getElementById(elId));
            }           
        </script>
	}
}
