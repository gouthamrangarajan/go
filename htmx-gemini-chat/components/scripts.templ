package components

var onceHandle = templ.NewOnceHandle()

templ bodyScript() {
	@onceHandle.Once() {
		<script type="text/javascript">
            var ABORT_CONTROLLER=new AbortController();//Global variable     
            var TIMEOUT;
            function setErrorMessage(message){
                Alpine.store('data').errorMessage=message;
                if(TIMEOUT){
                    clearTimeout(TIMEOUT);
                }
                TIMEOUT=setTimeout(()=>{
                    if(document.startViewTransition){
                        document.startViewTransition(()=>{
                            Alpine.store('data').errorMessage="";
                        });
                    }else{
                         Alpine.store('data').errorMessage="";
                    }
                },3000)
            }
            function createNewMessageUIAndGetMessageId(idToAppendHTML,messageUI){                
                const divEl=document.createElement("div");
                document.getElementById(idToAppendHTML).appendChild(divEl);
                divEl.outerHTML=messageUI;                                
                const strtIdx=messageUI.indexOf("message_");
                const messageId=messageUI.substring(strtIdx,messageUI.indexOf('"',strtIdx));
                return messageId;
            }
            function prependImageToUserMessage(messageId,imgBase64){
               const elToPrependImg= document.getElementById(messageId).parentElement.parentElement;
               const imgEl=document.createElement("img")
               imgEl.classList.add("w-full", "h-full")
               imgEl.src=imgBase64        
               elToPrependImg.prepend(imgEl);              
            }
            function upsertMenuUIWithMenuItem(menuItemUI){
                const strtIdx=menuItemUI.indexOf("li_");
                const elId=menuItemUI.substring(strtIdx,menuItemUI.indexOf('"',strtIdx));
                const el=document.getElementById(elId);
                if(el){//title change
                    if(document.startViewTransition){
                        document.startViewTransition(()=>{
                            el.outerHTML=menuItemUI;
                        });
                    }else{
                        el.outerHTML=menuItemUI;
                    }
                }else{//new menu item
                    const liEl=document.createElement("li");
                    document.getElementById('ul_menu').appendChild(liEl);
                    liEl.outerHTML=menuItemUI;
                    liEl.classList.remove('animate-scale-y')
                }   
            }        
            document.body.addEventListener('htmx:afterSwap', function(event) {	
                if(Alpine.store('data').addNewChatSessionProcessing){
                    Alpine.store('data').addNewChatSessionProcessing=false;
                    const newChatSessionId=document.getElementById("chatSessionId").value
                    window.history.replaceState({},document.title,window.location.origin+"/"+newChatSessionId);                     
                }						
            }, { signal: ABORT_CONTROLLER.signal });    
            document.body.addEventListener('htmx:afterRequest', function(event) {	
                if(event.detail.failed){
                    setErrorMessage('Error! Please try again later'); 
                }
            }, { signal: ABORT_CONTROLLER.signal });
            document.addEventListener('alpine:init', () => {                
                Alpine.store('data',{
                    addNewChatSessionProcessing:false,
                    menuOpen:false,
                    errorMessage:"",
                    openMenu(){
                        if(document.startViewTransition){
                            document.startViewTransition(()=>{
                                this.menuOpen=true;
                            });
                        }
                        else{
                            this.menuOpen=true;
                        }
                    },
                    closeMenu(){
                        if(document.startViewTransition){
                            document.startViewTransition(()=>{
                                this.menuOpen=false;
                            });
                        }
                        else{
                            this.menuOpen=false;
                        }
                    },
                    sendFullPageFetchEvent(ev,eventNameToDispatch){
                        ev.preventDefault();
                        this.closeMenu();
                        if(ABORT_CONTROLLER){
                            ABORT_CONTROLLER.abort();
                        }   
                        if(eventNameToDispatch){        
                            ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));
                        }
                    },
                    checkAndSetAddNewProcessing(ev,eventNameToDispatch){
                        ev.preventDefault();
                        if(!this.addNewChatSessionProcessing){
                            this.addNewChatSessionProcessing=true;
                            if(eventNameToDispatch){
                                ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));
                            }
                        }
                    },
                });
                Alpine.data('chatInput',()=>({
                    prompt:'',
                    processing:false,    
                    imgBase64:"",
                    fileName:"",                
                    setProcessing(val){
                        if(document.startViewTransition){
                            document.startViewTransition(()=>{
                                this.processing=val;
                            })
                        }
                        else{
                            this.processing=val;
                        }
                    },                                        
                    fileInputChanged(ev){
                        const fl=ev.currentTarget.files[0];
                        const reader = new FileReader();
                        reader.addEventListener("load",() => {
                            if (typeof reader.result == "string") {
                                if(reader.result.startsWith("data:image/")){
                                    this.imgBase64=reader.result;
                                    this.fileName=fl.name;
                                }else{
                                    setErrorMessage('Please select a valid image file')
                                }
                            }
                        },{ signal: ABORT_CONTROLLER.signal });
                        if (fl.size <= 1024 * 1024) {//1 mb
                            reader.readAsDataURL(fl);
                        }else{
                            setErrorMessage('Image size exceeds the limit of 1 MB');                                 
                        }
                    },
                    clearFileInput(){         
                        if(document.startViewTransition){
                            document.startViewTransition(()=>{
                                this.imgBase64='';
                                this.fileName=''; 
                            });
                        }               
                        else{
                            this.imgBase64='';
                            this.fileName=''; 
                        }                        
                        this.$refs.imageInput.value=''
                    },
                    submitMessage(ev,idToAppendData){
                        if(!ev.shiftKey && this.prompt.trim()!='' && !this.processing){
                            this.setProcessing(true);
                            const fm=new FormData();
                            fm.append("prompt",this.prompt);
                            fm.append("imgBase64",this.imgBase64)
                            fm.append("chatSessionId",document.getElementById("chatSessionId").value);                            
                            let messageId="";
                            let decodedValueMerged ="";
                            fetch('/send',{
                                body:fm,
                                method:"POST",
                                signal:ABORT_CONTROLLER.signal
                            }).then(resp=>{
                                if(!resp.ok){
                                    this.setProcessing(false);
                                    setErrorMessage('Error! Please try again later');     
                                    return;
                                }
                                this.prompt='';         
                                document.getElementById(idToAppendData).scrollTop = document.getElementById(idToAppendData).scrollHeight +40 ;                       
                                const reader = resp.body.getReader();
                                const processChunk = async () => {
                                    const { done, value } = await reader.read();
                                    if(done){//streaming end
                                        this.setProcessing(false);
                                        messageId="";
                                        decodedValueMerged="";
                                        return;
                                    }
                                    let decodedValue = new TextDecoder().decode(value);                                                                         
                                    if(decodedValue.includes("data:END")){//streaming end
                                        this.setProcessing(false);
                                        messageId="";
                                        decodedValueMerged="";
                                        return;
                                    }
                                    else if(decodedValue.includes("data:ERROR")){//error in gemini api
                                        this.setProcessing(false);
                                        messageId="";
                                        decodedValueMerged="";
                                        setErrorMessage('Error! Please try again later');     
                                        return;
                                    }
                                    else if(decodedValue.startsWith("<div class")){ //streamed output is a new user message item or new gemini message item
                                        messageId = createNewMessageUIAndGetMessageId(idToAppendData,decodedValue);                                        
                                        document.getElementById(idToAppendData).scrollTop = document.getElementById(idToAppendData).scrollHeight;
                                        decodedValueMerged="";
                                        if(this.imgBase64!=""){//streamed output is user message and its based on image input so prepend Img
                                            prependImageToUserMessage(messageId,this.imgBase64)
                                            this.clearFileInput();
                                        }
                                    }
                                    else if(decodedValue.startsWith("<li") && decodedValue.includes('id="li_')){ //streamed output is new menu item or existing menu title change 
                                        upsertMenuUIWithMenuItem(decodedValue);  
                                        decodedValueMerged="";                                  
                                    }
                                    else if(decodedValue.startsWith("<input") && decodedValue.includes("chatSessionId")){ //chat session id intput
                                        document.getElementById('chatSessionId').outerHTML=decodedValue;                                        
                                        decodedValueMerged="";
                                    }
                                    else{ //streamed output is gemini message that needs to be appended to existing message 
                                        decodedValueMerged += decodedValue;                                        
                                        document.getElementById(messageId).innerHTML = decodedValueMerged;                                        
                                    }
                                    processChunk();
                                }
                                processChunk()
                            }).catch(err=>{
                                console.log(err);
                                this.setProcessing(false);
                                setErrorMessage('Error! Please try again later');     
                            });                            
                        }
                    },
                   
                }));                               
            },{signal:ABORT_CONTROLLER.signal});                    
        </script>
	}
}
