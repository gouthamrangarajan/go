package components

import "strconv"
import "strings"

templ UserMessage(message string, animate bool) {
	{{ animateClass := "" }}
	if animate {
		{{ animateClass = "animate-scale-y" }}
	}
	<p class={ "w-full flex items-start gap-2 p-1 ",animateClass }>
		<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6 shrink-0">
			<path fill-rule="evenodd" d="M7.5 6a4.5 4.5 0 1 1 9 0 4.5 4.5 0 0 1-9 0ZM3.751 20.105a8.25 8.25 0 0 1 16.498 0 .75.75 0 0 1-.437.695A18.683 18.683 0 0 1 12 22.5c-2.786 0-5.433-.608-7.812-1.7a.75.75 0 0 1-.437-.695Z" clip-rule="evenodd"></path>
		</svg>
		<span class="prose prose-invert flex-1">{ message }</span>
	</p>
}

templ GeminiMessageTemplate(id int) {
	<p class="w-full flex items-start gap-2 p-1">
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none" class="shrink-0">
			<path d="M20 10.0196C14.6358 10.3431 10.3431 14.6358 10.0196 20H9.98042C9.65687 14.6358 5.36425 10.3431 0 10.0196V9.98043C5.36425 9.65688 9.65687 5.36424 9.98042 0H10.0196C10.3431 5.36424 14.6358 9.65688 20 9.98043V10.0196Z" fill="url(#paint0_radial_809_11874)"></path>
			<defs>
				<radialGradient id="paint0_radial_809_11874" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(-6.13727 9.97493) scale(21.6266 172.607)">
					<stop offset="0.385135" stop-color="#9E72BA"></stop>
					<stop offset="0.734299" stop-color="#D65C67"></stop>
					<stop offset="0.931035" stop-color="#D6635C"></stop>
				</radialGradient>
			</defs>
		</svg>
		<span class="prose prose-invert flex-1">
			<zero-md>
				<template data-append>
					<style>
                        .markdown-body {background-color:  var(--color-gray-900) !important; color:var(--color-gray-50) !important;} @media(prefers-color-scheme: dark){.markdown-body table{color:var(--color-gray-50) !important;}}
			        </style>
				</template>
				<script type="text/markdown" id={ "message_" + strconv.Itoa(id) }>
                </script>
			</zero-md>
		</span>
	</p>
}

templ GeminiMessage(message string) {
	<p class="w-full flex items-start gap-2 p-1">
		<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="none" class="shrink-0">
			<path d="M20 10.0196C14.6358 10.3431 10.3431 14.6358 10.0196 20H9.98042C9.65687 14.6358 5.36425 10.3431 0 10.0196V9.98043C5.36425 9.65688 9.65687 5.36424 9.98042 0H10.0196C10.3431 5.36424 14.6358 9.65688 20 9.98043V10.0196Z" fill="url(#paint0_radial_809_11874)"></path>
			<defs>
				<radialGradient id="paint0_radial_809_11874" cx="0" cy="0" r="1" gradientUnits="userSpaceOnUse" gradientTransform="translate(-6.13727 9.97493) scale(21.6266 172.607)">
					<stop offset="0.385135" stop-color="#9E72BA"></stop>
					<stop offset="0.734299" stop-color="#D65C67"></stop>
					<stop offset="0.931035" stop-color="#D6635C"></stop>
				</radialGradient>
			</defs>
		</svg>
		<span class="prose prose-invert flex-1" x-data={ "{md:`" + formatMessageForAlpine(message) + "`}" }>
			<zero-md>
				<template data-append>
					<style>
                        .markdown-body {background-color:  var(--color-gray-900) !important; color:var(--color-gray-50) !important;} @media(prefers-color-scheme: dark){.markdown-body table{color:var(--color-gray-50) !important;}}
			        </style>
				</template>
				<script type="text/markdown" x-html="md">			        
			    </script>
			</zero-md>
		</span>
	</p>
}

func formatMessageForAlpine(message string) string {
	ret := strings.ReplaceAll(message, `\`, `\\`)
	ret = strings.ReplaceAll(ret, "${", `\${`)
	ret = strings.ReplaceAll(ret, "`", "\\`")
	return ret
}
