// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func layout() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html class=\"w-full h-full\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Gemini Chat</title><meta name=\"description\" content=\"Simple AI Chat App to talk to Gemini AI\"><link rel=\"icon\" href=\"/assets/images/favicon.ico\"><link href=\"/assets/css/styles.css\" rel=\"stylesheet\"><link href=\"/assets/css/openprops.min.css\" rel=\"stylesheet\"><script src=\"/assets/js/htmx.min.js\" type=\"text/javascript\"></script><script src=\"/assets/js/Alpine_focus.min.js\" type=\"text/javascript\" defer></script><script src=\"/assets/js/Alpine.min.js\" type=\"text/javascript\" defer></script><script type=\"module\">\n                // Import element definition\n                import ZeroMd from 'https://cdn.jsdelivr.net/npm/zero-md@3'\n                // Register\n                customElements.define('zero-md', class extends ZeroMd {                   \n                    copySvgStr=`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"size-6\">\n                                    <path d=\"M7.5 3.375c0-1.036.84-1.875 1.875-1.875h.375a3.75 3.75 0 0 1 3.75 3.75v1.875C13.5 8.161 14.34 9 15.375 9h1.875A3.75 3.75 0 0 1 21 12.75v3.375C21 17.16 20.16 18 19.125 18h-9.75A1.875 1.875 0 0 1 7.5 16.125V3.375Z\" />\n                                    <path d=\"M15 5.25a5.23 5.23 0 0 0-1.279-3.434 9.768 9.768 0 0 1 6.963 6.963A5.23 5.23 0 0 0 17.25 7.5h-1.875A.375.375 0 0 1 15 7.125V5.25ZM4.875 6H6v10.125A3.375 3.375 0 0 0 9.375 19.5H16.5v1.125c0 1.035-.84 1.875-1.875 1.875h-9.75A1.875 1.875 0 0 1 3 20.625V7.875C3 6.839 3.84 6 4.875 6Z\" />\n                                </svg>`;\n                    tickSvgStr=`<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"size-6\">\n                                    <path fill-rule=\"evenodd\" d=\"M19.916 4.626a.75.75 0 0 1 .208 1.04l-9 13.5a.75.75 0 0 1-1.154.114l-6-6a.75.75 0 0 1 1.06-1.06l5.353 5.353 8.493-12.74a.75.75 0 0 1 1.04-.207Z\" clip-rule=\"evenodd\" />\n                                </svg>\n                                `;\n                    copyButtonStr=`<button aria-label=\"Copy code\">\n                                    ${this.copySvgStr}\n                                  </button>`;\n                    async load() { \n                        await super.load();                         \n                        this.template += `<style>                                           \n                                            @media(prefers-color-scheme: dark){\n                                                .markdown-body {\n                                                    background-color:  var(--color-gray-900) !important; \n                                                    color:var(--color-gray-50) !important;\n                                                } \n                                                .markdown-body table{\n                                                    color:var(--color-gray-50) !important;\n                                                }\n                                            }  \t\n                                            .zero-md-copy{position:relative;}\n                                            .zero-md-copy button{\n                                                position:absolute;\n                                                top:0.5rem;\n                                                right:0.75rem;\n                                                cursor:pointer;\n                                                opacity:0.9;\n                                                height:2rem;\n                                                width:2rem;\n                                            }\n                                        </style>                                      \n                                        `;                      \n                    } \n                    async parse(obj) { \n                        if(obj.text.includes('```mermaid')){                                \n                            const lines = obj.text.split('\\n'); \n                            for(let idx=0;idx<lines.length;idx++){\n                                if (lines[idx].includes('[') &&  !lines[idx].includes('[\"') //use case ALB_Lambda1[ALB(Lambda)]\n                                    && !lines[idx].includes('[(\"')){ //use case ALB_Lambda1[(\"ALB (for Lambda 1)\")]\n                                    lines[idx]=lines[idx].replace(/\\[/g,'[\"').replace(/\\]/g,'\"]');                                        \n                                }\n                                else if (lines[idx].includes('{') &&  !lines[idx].includes('{\"')){ //use case ALB{LAMBDA(1)}\n                                    lines[idx]=lines[idx].replace(/\\{/g,'{\"').replace(/\\}/g,'\"}');                                        \n                                }\n                                else if(lines[idx].includes('subgraph') && !lines[idx].includes('subgraph \"')){\n                                    lines[idx]=lines[idx].replace('subgraph','subgraph \"');\n                                    lines[idx]+='\"';\n                                }                                    \n                                    \n                            }\n                            obj.text = lines.join('\\n');    \n                        }\n                        const parsed = await super.parse(obj);                                                \n                        if (!navigator.clipboard) return parsed; \n                        const tpl = document.createElement('template'); \n                        tpl.innerHTML = parsed; \n                        tpl.content.querySelectorAll('pre>code').forEach((code) => { \n                        const pre = code.parentElement; \n                        pre.replaceWith( \n                                this.frag(`<div class=\"zero-md-copy\">${pre.outerHTML}${this.copyButtonStr}</div>`)\n                            );\n                        }); \n                        return tpl.innerHTML; \n                    } \n                    async render(obj) { \n                        const out = await super.render(obj); \n                        this.root.querySelectorAll('.zero-md-copy button').forEach((btn) => { \n                            btn.onclick = async () => { \n                                const code = btn.previousElementSibling.firstElementChild.innerText; \n                                await navigator.clipboard.writeText(code); \n                                btn.innerHTML = this.tickSvgStr;\n                                btn.setAttribute('aria-label', 'Copied code');\n                                setTimeout(() => {btn.innerHTML = this.copySvgStr;btn.setAttribute('aria-label', 'Copy code');}, 2500); \n                            } \n                        });                         \n                        return out;\n                    }               \n                 });\n            </script></head><body x-cloak class=\"w-full h-full relative font-(family-name:--font-geometric-humanist) bg-white dark:bg-gray-900 text-slate-700  dark:text-gray-50 \" x-data=\"{}\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = bodyScript().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
