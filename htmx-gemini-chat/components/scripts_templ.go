// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.887
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

var onceHandle = templ.NewOnceHandle()

func bodyScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script type=\"text/javascript\">            \n            function addErrorMessage(message){\n                if(document.startViewTransition){\n                    document.startViewTransition(()=>{\n                        Alpine.store('data').errorMessages.push(message);\n                    });\n                }\n                else{\n                    Alpine.store('data').errorMessages.push(message);\n                }\n                setTimeout(()=>{\n                    if(document.startViewTransition){\n                        document.startViewTransition(()=>{\n                            Alpine.store('data').errorMessages.splice(0,1);\n                        });\n                    }else{\n                         Alpine.store('data').errorMessages.splice(0,1);\n                    }\n                },3000);\n            }              \n            document.addEventListener('DOMContentLoaded', function() {                \n                domContentLoadedEvent();\n            });\n            function domContentLoadedEvent() {                \n                document.querySelectorAll('zero-md').forEach(function(el) {                    \n                    el.addEventListener('zero-md-rendered', function() {      \n                        if(document.startViewTransition){\n                            document.startViewTransition(()=>{\n                                if(el.parentElement.parentElement.classList.contains(\"hidden\")){\n                                    el.parentElement.parentElement.classList.replace(\"hidden\",\"flex\");\n                                } else if(el.parentElement.parentElement.parentElement.classList.contains(\"hidden\")){\n                                    el.parentElement.parentElement.parentElement.classList.replace(\"hidden\",\"flex\");\n                                }\n                            });\n                        }\n                        else{                     \n                            if(el.parentElement.parentElement.classList.contains(\"hidden\")){\n                                el.parentElement.parentElement.classList.replace(\"hidden\",\"flex\");\n                            } else if(el.parentElement.parentElement.parentElement.classList.contains(\"hidden\")){\n                                el.parentElement.parentElement.parentElement.classList.replace(\"hidden\",\"flex\");\n                            }\n                        }\n                    });\n                    //Below is doubtful and never called\n                    el.addEventListener('zero-md-error', function() {                          \n                        if(el.parentElement.parentElement.classList.contains(\"hidden\")){\n                            el.parentElement.parentElement.classList.replace(\"hidden\",\"flex\");\n                        }else if(el.parentElement.parentElement.parentElement.classList.contains(\"hidden\")){\n                            el.parentElement.parentElement.parentElement.classList.replace(\"hidden\",\"flex\");\n                        }\n                    });\n                });\n            }\n            document.body.addEventListener('htmx:afterSwap', function(event) {\t\n                if(Alpine.store('data').addNewChatSessionProcessing){\n                    Alpine.store('data').addNewChatSessionProcessing=false;\n                    const newChatSessionId=document.getElementById(\"chatSessionId\").value;\n                    window.history.replaceState({},document.title,window.location.origin+\"/\"+newChatSessionId);                     \n                } else if(Alpine.store('data').fullPageFetchProcessing){\n                    Alpine.store('data').fullPageFetchProcessing=false;\n                    domContentLoadedEvent();\n                }\n                else{   \n                    const chatSessionId=document.getElementById(\"chatSessionId\").value;\n                    const chatSessionIdParsed=parseInt(chatSessionId);                    \n                     if(!window.location.pathname.endsWith(\"/\"+chatSessionId)){\n                        if(isNaN(chatSessionIdParsed) || chatSessionIdParsed==0){\n                            window.history.replaceState({},document.title,window.location.origin);                     \n                        }\n                        else {\n                            window.history.replaceState({},document.title,window.location.origin+\"/\"+chatSessionId); \n                            domContentLoadedEvent();                    \n                        }  \n                     }\n                }            \t\t\t\t\t\n            });    \n            document.body.addEventListener('htmx:afterRequest', function(event) {\t\n                if(event.detail.failed){\n                    addErrorMessage('Error! Please try again later'); \n                    if(Alpine.store('data').addNewChatSessionProcessing){\n                       Alpine.store('data').addNewChatSessionProcessing=false;                                                      \n                    }\t\n                    if(Alpine.store('data').fullPageFetchProcessing){\n                       Alpine.store('data').fullPageFetchProcessing=false;                                                      \n                    }\t                    \n                }\n                if(Alpine.store('data').deleteChatSessionProcessing){\n                    Alpine.store('data').deleteChatSessionProcessing=false;                                                      \n                }\t\n            });\n            document.body.addEventListener('htmx:confirm', function(evt) {                \n                const msg=evt.target.getAttribute('hx-confirm');\n                if(msg){\n                  evt.preventDefault();\n                  const confirmationResult=window.confirm(msg);\n                  if(confirmationResult){\n                    evt.detail.issueRequest(true)\n                  }\n                  else if(Alpine.store('data').deleteChatSessionProcessing){\n                    Alpine.store('data').deleteChatSessionProcessing=false;                                                      \n                  }\n                }\n            });\n           \n            document.addEventListener('alpine:init', () => {                \n                Alpine.store('data',{\n                    addNewChatSessionProcessing:false,\n                    deleteChatSessionProcessing:false,\n                    fullPageFetchProcessing:false,                    \n                    promptProcessing:false,\n                    currentMessageId:-1,\n                    menuOpen:false,\n                    errorMessages:[],\n                    openMenu(){                        \n                        this.menuOpen=true;\n                        htmx.process(document.getElementsByTagName('aside')[0]);\n                    },\n                    closeMenu(){                      \n                        this.menuOpen=false;\n                    },\n                    sendFullPageFetchEvent(ev,eventNameToDispatch){\n                        ev.preventDefault();                        \n                        this.fullPageFetchProcessing=true;\n                        this.closeMenu();                        \n                        if(eventNameToDispatch){        \n                            ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));\n                        }                        \n                        \n                    },\n                    checkAndSetAddNewProcessing(ev,eventNameToDispatch){\n                        ev.preventDefault();\n                        if(!this.addNewChatSessionProcessing){\n                            this.addNewChatSessionProcessing=true;\n                            if(eventNameToDispatch){\n                                ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));\n                            }\n                        }\n                    },\n                    checkAndSetDeleteProcessing(ev,eventNameToDispatch){\n                        ev.preventDefault();\n                        if(!this.deleteChatSessionProcessing){\n                            this.deleteChatSessionProcessing=true;\n                            if(eventNameToDispatch){\n                                ev.currentTarget.dispatchEvent(new Event(eventNameToDispatch));\n                            }\n                        }\n                    },                    \n                });\n                Alpine.data('chatInput',()=>({\n                    prompt:'',\n                    imgBase64:\"\",\n                    fileName:\"\",  \n                    abortController:new AbortController(),         \n                    init(){\n                        this.$watch('$store.data.fullPageFetchProcessing',(val)=>{\n                            if(val){\n                                this.checkAndAbortStreaming();\n                            }\n                        }),\n                        this.$watch('$store.data.addNewChatSessionProcessing',(val)=>{\n                            if(val){\n                                this.checkAndAbortStreaming();\n                            }\n                        }),\n                        this.$watch('$store.data.deleteChatSessionProcessing',(val)=>{                            \n                            if(val){\n                                const chatSessionId=document.getElementById(\"chatSessionId\").value;\n                                if(window.location.pathname.endsWith(\"/\"+chatSessionId)){\n                                    this.checkAndAbortStreaming();\n                                }else{\n                                    const firstMenu=document.getElementsByClassName(\"menu\")[0]\n                                    if(firstMenu && firstMenu.id.endsWith(\"_\"+chatSessionId)){                                        \n                                        this.checkAndAbortStreaming();\n                                    }\n                                }\n                            }\n                        })\n                    },                          \n                    checkAndAbortStreaming(){\n                        if(this.$store.data.promptProcessing){\n                            this.abortController.abort();\n                            this.abortController=new AbortController();\n                            this.setProcessing(false);\n                        }\n                    },             \n                    setProcessing(val){\n                        if(document.startViewTransition){\n                            document.startViewTransition(()=>{\n                                this.$store.data.promptProcessing=val;                                \n                            })\n                        }\n                        else{\n                            this.$store.data.promptProcessing=val;                            \n                        }\n                    },                                        \n                    fileInputChanged(ev){\n                        const fl=ev.currentTarget.files[0];\n                        const reader = new FileReader();\n                        reader.addEventListener(\"load\",() => {\n                            if (typeof reader.result == \"string\") {\n                                if(reader.result.startsWith(\"data:image/\")){\n                                    this.imgBase64=reader.result;\n                                    this.fileName=fl.name;\n                                }else{\n                                    addErrorMessage('Please select a valid image file')\n                                }\n                            }\n                        });\n                        if (fl.size <= 1024 * 1024) {//1 mb\n                            reader.readAsDataURL(fl);\n                        }else{\n                            addErrorMessage('Image size exceeds the limit of 1 MB');                                 \n                        }\n                    },\n                    clearFileInput(){         \n                        if(document.startViewTransition){\n                            document.startViewTransition(()=>{\n                                this.imgBase64='';\n                                this.fileName=''; \n                            });\n                        }               \n                        else{\n                            this.imgBase64='';\n                            this.fileName=''; \n                        }                        \n                        this.$refs.imageInput.value=''\n                    },\n                    async submitMessage(ev,idToAppendData){\n                        if(!ev.shiftKey && this.prompt.trim()!='' && !this.$store.data.promptProcessing){\n                            this.setProcessing(true);\n                            const fm=new FormData();\n                            fm.append(\"prompt\",this.prompt);\n                            fm.append(\"imgBase64\",this.imgBase64)\n                            fm.append(\"chatSessionId\",document.getElementById(\"chatSessionId\").value);                                                        \n                            try{\n                                let decodedValueMerged =\"\";                                \n                                const resp= await fetch('/send',{\n                                    body:fm,\n                                    method:\"POST\",  \n                                    signal:this.abortController.signal,                              \n                                });                        \n                                if(!resp.ok){\n                                    this.setProcessing(false);\n                                    addErrorMessage('Error! Please try again later');     \n                                    return;\n                                }                                   \n                                const reader = resp.body.getReader();\n                                const textDecoder=new TextDecoder();                                                                 \n                                while (true){\n                                    const { done, value } = await reader.read();\n                                    if(done){//streaming end\n                                        this.setProcessing(false);\n                                        this.$store.data.currentMessageId=-1;\n                                        decodedValueMerged=\"\";\n                                        break;\n                                    }\n                                    let decodedValue = textDecoder.decode(value);                                                                         \n                                    if(decodedValue.includes(\"data:END\")){//streaming end\n                                        this.setProcessing(false);\n                                        this.$store.data.currentMessageId=-1;\n                                        decodedValueMerged=\"\";                                                                                \n                                        break;\n                                    }\n                                    else if(decodedValue.includes(\"data:ERROR\")){//error in gemini api\n                                        this.setProcessing(false);\n                                        this.$store.data.currentMessageId=-1;\n                                        decodedValueMerged=\"\";                                        \n                                        addErrorMessage('Error! Please try again later');     \n                                        break;\n                                    }\n                                    else if(decodedValue.startsWith(\"<div class\")){ //streamed output is a new user message item or new gemini message item\n                                        this.$store.data.currentMessageId = createNewMessageUIAndGetMessageId(idToAppendData,decodedValue);                                                                                 \n                                        decodedValueMerged=\"\";                                           \n                                        if(this.prompt!=''){ //streamed output is user message \n                                            this.appendPromptAndImageToUserMessageTemplate()                                                                   \n                                        }\n                                        document.getElementsByTagName('main')[0].scrollTop=document.getElementsByTagName('main')[0].scrollHeight+100;                         \n                                    }\n                                    else if(decodedValue.startsWith(\"<li\") && decodedValue.includes('id=\"li_')){ //streamed output is new menu item or existing menu title change \n                                        upsertMenuUIWithMenuItem(decodedValue);  \n                                    }\n                                    else if(decodedValue.startsWith(\"<input\") && decodedValue.includes(\"chatSessionId\")){ //chat session id intput\n                                        document.getElementById('chatSessionId').outerHTML=decodedValue;                                        \n                                    }\n                                    else{ //streamed output is gemini message that needs to be appended to existing message \n                                        decodedValueMerged += decodedValue;                                        \n                                        document.getElementById('message_'+this.$store.data.currentMessageId).innerHTML = decodedValueMerged;   \n                                    }                                    \n                                }\n                        \n                            }\n                            catch(err){\n                                console.log(err);\n                                this.setProcessing(false);\n                                if (err?.name !== 'AbortError') {\n                                    addErrorMessage('Error! Please try again later');     \n                                }\n                            }                            \n                        }\n                    },\n                    appendPromptAndImageToUserMessageTemplate(){                    \n                        document.getElementById('message_'+this.$store.data.currentMessageId).innerHTML = this.prompt;  \n                        this.prompt='';\n                        if(this.imgBase64!=\"\"){// streamed output is based on image input so prepend Img\n                            prependImageToUserMessage(this.$store.data.currentMessageId,this.imgBase64)\n                            this.clearFileInput();\n                        } \n                    }                                  \n                }));                               \n            });             \n            function createNewMessageUIAndGetMessageId(idToAppendHTML,messageUI){                \n                const divEl=document.createElement(\"div\");\n                document.getElementById(idToAppendHTML).appendChild(divEl);\n                divEl.outerHTML=messageUI;                                \n                const strtIdx=messageUI.indexOf(\"message_\");\n                if (strtIdx==-1){                   \n                    return -1;\n                }\n                const messageId=messageUI.substring(strtIdx+\"message_\".length,messageUI.indexOf('\"',strtIdx));                \n                return messageId;\n            }\n            function prependImageToUserMessage(messageId,imgBase64){\n               const elToPrependImg= document.getElementById(\"message_\"+messageId).parentElement.parentElement;\n               const imgEl=document.createElement(\"img\")\n               imgEl.classList.add(\"w-full\", \"h-full\")\n               imgEl.src=imgBase64        \n               elToPrependImg.prepend(imgEl);              \n            }\n            function upsertMenuUIWithMenuItem(menuItemUI){\n                const strtIdx=menuItemUI.indexOf(\"li_\");\n                const elId=menuItemUI.substring(strtIdx,menuItemUI.indexOf('\"',strtIdx));\n                const el=document.getElementById(elId);\n                if(el){//title change\n                    if(document.startViewTransition){\n                        document.startViewTransition(()=>{\n                            el.outerHTML=menuItemUI;\n                        });\n                    }else{\n                        el.outerHTML=menuItemUI;\n                    }\n                }else{//new menu item\n                    const liEl=document.createElement(\"li\");\n                    document.getElementById('ul_menu').appendChild(liEl);\n                    liEl.outerHTML=menuItemUI;\n                    liEl.classList.remove('animate-scale-y');                                        \n                }   \n                htmx.process(document.getElementById(elId));\n            }           \n        </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = onceHandle.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
