package components

import (
	"htmx-calendar/components/shared"
	"htmx-calendar/models"
	"strconv"
	"strings"
	"time"
)

templ MonthCalendarPage(calendarData [][7]time.Time, eventsData []models.EventData, currentMonthAndYear time.Time, from string, isOob bool) {
	if !isOob {
		@layout() {
			<main
				class="h-dvh w-dvw overflow-x-hidden overflow-y-auto scroll-smooth scrollbar-thin scrollbar-track-purple-300 scrollbar-thumb-purple-600"
				id="main"
			>
				@monthCalendar(calendarData, eventsData, currentMonthAndYear, from)
			</main>
		}
	} else {
		<main
			class="h-dvh w-dvw overflow-x-hidden overflow-y-auto scroll-smooth scrollbar-thin scrollbar-track-purple-300 scrollbar-thumb-purple-600"
			hx-swap-oob="true"
			id="main"
		>
			@monthCalendar(calendarData, eventsData, currentMonthAndYear, from)
		</main>
	}
}

templ monthCalendar(calendarData [][7]time.Time, eventsData []models.EventData, currentMonthAndYear time.Time, from string) {
	<section class="w-full h-full flex flex-col gap-1" style="view-transition-name:mainSection">
		@monthCalendarheader(currentMonthAndYear, from)
		@monthCalendarTable(calendarData, eventsData, currentMonthAndYear, from)
	</section>
}

templ monthCalendarheader(currentMonthAndYear time.Time, from string) {
	{{ years := []int{} }}
	{{for idx := -10; idx <= 10; idx++ {
	years = append(years, currentMonthAndYear.Year()+idx)
}
	}}
	<div class="w-full flex justify-center items-center gap-7 py-2 px-4">
		<div class="flex-1 flex justify-end items-center gap-3 relative" x-data="{showYears:false}">
			<div class="text-xl text-purple-600 font-semibold text-center flex gap-1" style="view-transition-name:monthAndYearName">
				<span>{ currentMonthAndYear.Month().String() }</span>
				<a
					href="#"
					class="appearance-none outline-none px-1 cursor-pointer rounded transition duration-300 hover:opacity-80 focus:ring-2 focus:ring-purple-600"
					x-on:click.stop.prevent="showYears=true"
				>{ strconv.Itoa(currentMonthAndYear.Year()) }</a>
			</div>
			<div
				class="absolute animate-drop-down top-8 -right-11 z-10 w-64 border border-purple-300 bg-white rounded py-2 px-4 flex flex-col gap-2 md:right-24"
				x-on:click.outside="showYears=false"
				x-show="showYears"
				x-transition:leave="transition var(--ease-elastic-in-5) duration-200"
				x-transition:leave-start="opacity-100 scale-100"
				x-transition:leave-end="opacity-0 scale-70"
			>
				<span class="text-lg text-slate-600">Select year:</span>
				<div class="flex gap-2 flex-wrap items-center w-full">
					for _, year := range years {
						@goToYearLink(int(currentMonthAndYear.Month()), year, int(currentMonthAndYear.Year()))
					}
				</div>
			</div>
			@prevMonthLink(currentMonthAndYear, strings.ToLower(from) == "prev")
			@nextMonthLink(currentMonthAndYear, strings.ToLower(from) == "next")
		</div>
		<div class="flex items-center">
			@shared.MonthViewLink(currentMonthAndYear, true)
			@shared.WeekViewLink(currentMonthAndYear, false)
		</div>
	</div>
}
