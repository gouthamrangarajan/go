package components

import (
	"math"
	"strconv"
	"time"
)

templ prevWeekLink(week int, currentMonthAndYear time.Time, autoFocus bool) {
	{{ url := generatePrevWeekUrl(week, currentMonthAndYear) }}
	if autoFocus {
		<a
			class="appearance-none outline-none bg-orange-600 text-white py-1 px-2 rounded transition duration-300 hover:opacity-80 focus:ring-2 focus:ring-orange-600 focus:ring-offset-2 focus:ring-offset-orange-50"
			autoFocus
			href={ templ.SafeURL(url) }
			hx-get={ url }
			hx-boost="true"
			hx-swap="outerHTML"
			hx-target="main"
			hx-trigger="PREV_MONTH_EVENT"
			hx-push-url="true"
			x-bind:class="$store.data.processing?'opacity-80 cursor-not-allowed':'opacity-100 cursor-pointer'"
			x-on:click="$store.data.setProcessingForFetch($event,'PREV_MONTH_EVENT')"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
				<path fill-rule="evenodd" d="M7.72 12.53a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 1 1 1.06 1.06L9.31 12l6.97 6.97a.75.75 0 1 1-1.06 1.06l-7.5-7.5Z" clip-rule="evenodd"></path>
			</svg>
		</a>
	} else {
		<a
			class="appearance-none outline-none bg-orange-600 text-white py-1 px-2 rounded transition duration-300 hover:opacity-80 focus:ring-2 focus:ring-orange-600 focus:ring-offset-2 focus:ring-offset-orange-50"
			href={ templ.SafeURL(url) }
			hx-get={ url }
			hx-boost="true"
			hx-swap="outerHTML"
			hx-target="main"
			hx-trigger="PREV_MONTH_EVENT"
			hx-push-url="true"
			x-bind:class="$store.data.processing?'opacity-80 cursor-not-allowed':'opacity-100 cursor-pointer'"
			x-on:click="$store.data.setProcessingForFetch($event,'PREV_MONTH_EVENT')"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
				<path fill-rule="evenodd" d="M7.72 12.53a.75.75 0 0 1 0-1.06l7.5-7.5a.75.75 0 1 1 1.06 1.06L9.31 12l6.97 6.97a.75.75 0 1 1-1.06 1.06l-7.5-7.5Z" clip-rule="evenodd"></path>
			</svg>
		</a>
	}
}

templ nextWeekLink(week int, currentMonthAndYear time.Time, autoFocus bool) {
	{{ url := generateNextWeekUrl(week, currentMonthAndYear) }}
	if autoFocus {
		<a
			class="appearance-none outline-none bg-orange-600 text-white py-1 px-2 rounded transition duration-300  hover:opacity-80 focus:ring-2 focus:ring-orange-600 focus:ring-offset-2 focus:ring-offset-orange-50"
			autoFocus
			href={ templ.SafeURL(url) }
			hx-get={ url }
			hx-boost="true"
			hx-swap="outerHTML"
			hx-target="main"
			hx-trigger="NEXT_MONTH_EVENT"
			hx-push-url="true"
			x-bind:class="$store.data.processing?'opacity-80 cursor-not-allowed':'opacity-100 cursor-pointer'"
			x-on:click="$store.data.setProcessingForFetch($event,'NEXT_MONTH_EVENT')"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
				<path fill-rule="evenodd" d="M16.28 11.47a.75.75 0 0 1 0 1.06l-7.5 7.5a.75.75 0 0 1-1.06-1.06L14.69 12 7.72 5.03a.75.75 0 0 1 1.06-1.06l7.5 7.5Z" clip-rule="evenodd"></path>
			</svg>
		</a>
	} else {
		<a
			class="appearance-none outline-none bg-orange-600 text-white py-1 px-2 rounded transition duration-300  hover:opacity-80 focus:ring-2 focus:ring-orange-600 focus:ring-offset-2 focus:ring-offset-orange-50"
			href={ templ.SafeURL(url) }
			hx-get={ url }
			hx-boost="true"
			hx-swap="outerHTML"
			hx-target="main"
			hx-trigger="NEXT_MONTH_EVENT"
			hx-push-url="true"
			x-bind:class="$store.data.processing?'opacity-80 cursor-not-allowed':'opacity-100 cursor-pointer'"
			x-on:click="$store.data.setProcessingForFetch($event,'NEXT_MONTH_EVENT')"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
				<path fill-rule="evenodd" d="M16.28 11.47a.75.75 0 0 1 0 1.06l-7.5 7.5a.75.75 0 0 1-1.06-1.06L14.69 12 7.72 5.03a.75.75 0 0 1 1.06-1.06l7.5 7.5Z" clip-rule="evenodd"></path>
			</svg>
		</a>
	}
}

func numberOfWeeksInMonth(currentMonthAndYear time.Time) int {
	startDateOfMonth := time.Date(currentMonthAndYear.Year(), currentMonthAndYear.Month(), 1, 0, 0, 0, 0, currentMonthAndYear.Location())
	startDateForCalendar := startDateOfMonth.AddDate(0, 0, -int(startDateOfMonth.Weekday()))
	endDateOfMonth := time.Date(currentMonthAndYear.Year(), currentMonthAndYear.Month()+1, 0, 23, 59, 0, 0, currentMonthAndYear.Location())
	endDateForCalendar := endDateOfMonth.AddDate(0, 0, 6-int(endDateOfMonth.Weekday()))
	numberOfDays := math.Ceil(endDateForCalendar.Sub(startDateForCalendar).Hours() / 24)
	numberOfWeeks := int(numberOfDays / 7)
	// if endDateOfMonth.Month() != endDateForCalendar.Month() {
	// 	numberOfWeeks = numberOfWeeks - 1
	// }
	return numberOfWeeks
}

func generatePrevWeekUrl(week int, currentMonthAndYear time.Time) string {
	week = week - 1
	month := int(currentMonthAndYear.Month())
	year := currentMonthAndYear.Year()
	if week < 1 {
		month = month - 1
		if month < 1 {
			month = 12
			year = year - 1
		}
		week = numberOfWeeksInMonth(time.Date(year, time.Month(month), 1, 0, 0, 0, 0, time.Now().Location()))
	}
	url := "/wk?from=prev&week=" + strconv.Itoa(week) + "&month=" + strconv.Itoa(month) + "&year=" + strconv.Itoa(year)
	return url
}

func generateNextWeekUrl(week int, currentMonthAndYear time.Time) string {
	week = week + 1
	month := int(currentMonthAndYear.Month())
	year := currentMonthAndYear.Year()
	availableNumberOfWeeks := numberOfWeeksInMonth(time.Date(year, time.Month(month), 1, 0, 0, 0, 0, time.Now().Location()))
	if week > availableNumberOfWeeks {
		week = 1
		month = month + 1
		if month > 12 {
			month = 1
			year = year + 1
		}
	}

	url := "/wk?from=next&week=" + strconv.Itoa(week) + "&month=" + strconv.Itoa(month) + "&year=" + strconv.Itoa(year)
	return url
}
