package components

import (
	"htmx-calendar/models"
	"strconv"
	"strings"
	"time"
)

templ calendar(calendarData [][7]time.Time, eventsData []models.CalendarData, currentMonthAndYear time.Time, from string) {
	{{ days := []string{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"} }}
	<table class="w-full h-full table-fixed" style="view-transition-name:monthTable">
		<thead>
			for idx,day := range days {
				{{ class := "border-y-2 border-gray-300" }}
				if idx+1!=len(days) {
					{{ class = "border-y-2 border-r-2 border-gray-300" }}
				}
				<th class={ class }>{ day }</th>
			}
		</thead>
		<tbody>
			{{ animationClass := "" }}
			if  strings.ToLower(from) == "prev" {
				{{ animationClass = "animate-slide-right" }}
			} else if strings.ToLower(from) == "next" {
				{{ animationClass = "animate-slide-left" }}
			}
			{{ heightClass := "h-22" }}
			if len(calendarData) < 6 {
				{{ heightClass = "h-28" }}
			}
			for row := 0; row < len(calendarData); row++ {
				<tr>
					for col := 0;col < len(calendarData[row]);col++ {
						{{ tdClass := "border-b-2 border-r-2 border-gray-300 " + animationClass }}
						if col +1 == len(days) && row +1 == len(calendarData) {
							{{ tdClass = "" + animationClass }}
						} else if col + 1 == len(days) {
							{{ tdClass = "border-b-2 border-gray-300 " + animationClass }}
						} else if row +1 == len(calendarData) {
							{{ tdClass = "border-r-3 border-gray-300 " + animationClass }}
						}
						<td class={ tdClass }>
							<div class="py-2 px-4 flex flex-col w-full h-full justify-start">
								{{ spanClass := "text-slate-600" }}
								if calendarData[row][col].Month() != currentMonthAndYear.Month() || calendarData[row][col].Year()!=currentMonthAndYear.Year() {
									{{ spanClass = "text-slate-400" }}
								}
								<span class={ spanClass }>{ strconv.Itoa(calendarData[row][col].Day()) }</span>
								<div class={ " w-full overflow-y-auto flex flex-col gap-1",heightClass }>
									for _,event := range filterDateEvents(eventsData,calendarData[row][col]) {
										<div class="bg-orange-600 text-white text-sm cursor-pointer py-1 px-3 rounded w-full truncate shrink-0 ">
											{ event.Task }
										</div>
									}
								</div>
							</div>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

func filterDateEvents(eventsData []models.CalendarData, date time.Time) []models.CalendarData {
	dateStr := date.Format("2006-01-02")
	var retValue []models.CalendarData

	for _, data := range eventsData {
		if data.Date == dateStr {
			retValue = append(retValue, data)
		}
	}
	return retValue
}
