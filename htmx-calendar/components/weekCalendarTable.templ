package components

import (
	"htmx-calendar/components/shared"
	"htmx-calendar/models"
	"strconv"
	"strings"
	"time"
)

templ weekCalendarTable(calendarData [][7]time.Time, eventsData []models.EventData, currentMonthAndYear time.Time, from string, week int) {
	{{ days := []string{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"} }}
	{{ heightClass := "h-8 lg:h-14 xl:h-16" }}
	<table class="w-full h-full table-fixed" style="view-transition-name:none">
		<tbody style="view-transition-name:none">
			for idx,day:= range days {
				<tr>
					{{ td1Class := generateWeekTdClass(idx, 0, from) }}
					{{ td2Class := generateWeekTdClass(idx, 1, from) }}
					<td class={ "border-r-2 border-gray-300 font-semibold text-center",td1Class }>
						<span style={ "view-transition-name:headerDay-" + day }>{ day }</span>
					</td>
					<td class={ "w-11/12 border-r-2 border-gray-300",td2Class }>
						{{ active, activeClass := getActiveFlagAndActiveClassWeekTd(0, idx, calendarData, currentMonthAndYear) }}
						{{ dndClassBindExpression := "$store.data.checkDnDRowCol(" + strconv.Itoa(idx) + "," + strconv.Itoa(1) + ")?'border-3 border-teal-600':'border-3 border-transparent'" }}
						{{ allowDnD := calendarData[0][idx].Sub(time.Now()).Hours() >= -24 }}
						<div
							class="p-1 flex flex-col w-full h-full justify-start items-start gap-1 border-dashed"
							x-bind:class={ dndClassBindExpression }
							ondragover={ templ.JSFuncCall("setAlpineStoreDnDRowCol", templ.JSExpression("event"), idx, 1, allowDnD) }
							ondragleave={ templ.JSFuncCall("removeAlpineStoreDnDRowCol", idx, 1) }
							ondrop={ templ.JSFuncCall("eventDropped", templ.JSExpression("event"), calendarData[0][idx].Format("2006-01-02"), allowDnD) }
						>
							@shared.AddEventLink(calendarData[0][idx], week, active)
							<div
								class={ "w-full overflow-x-hidden overflow-y-auto flex flex-col gap-1 rounded p-1 scrollbar-thin scrollbar-track-purple-300 scrollbar-thumb-purple-600 focus:outline-2 focus:outline-purple-600",heightClass }
								style={ "view-transition-name:items-" + calendarData[0][idx].Format("2006-01-02") }
							>
								for _,event := range filterDateEvents(eventsData,calendarData[0][idx]) {
									<div
										draggable={ "true" }
										data-id={ event.Id }
										ondragstart={ templ.JSFuncCall("dragStarted", templ.JSExpression("event"), event.Id) }
										class={ "group text-white text-sm cursor-pointer py-1 px-3 rounded w-full truncate shrink-0 flex items-center gap-2 lg:text-base",activeClass }
										style="view-transition-name:none"
									>
										<span class="flex-1 truncate">{ event.Task }</span>
										if active {
											<button
												name="eventId"
												value={ event.Id }
												hx-delete="/delete"
												hx-confirm="Are you sure you want to delete this event?"
												hx-target="closest div"
												hx-swap="outerHTML"
												class="appearance-none outline-none p-1 cursor-pointer opacity-90 group-hover:opacity-100 transition duration-300 rounded-full focus:opacity-100 focus:ring-1 focus:ring-white disabled:cursor-not-allowed disabled:opacity-50"
											>
												<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-5">
													<path fill-rule="evenodd" d="M16.5 4.478v.227a48.816 48.816 0 0 1 3.878.512.75.75 0 1 1-.256 1.478l-.209-.035-1.005 13.07a3 3 0 0 1-2.991 2.77H8.084a3 3 0 0 1-2.991-2.77L4.087 6.66l-.209.035a.75.75 0 0 1-.256-1.478A48.567 48.567 0 0 1 7.5 4.705v-.227c0-1.564 1.213-2.9 2.816-2.951a52.662 52.662 0 0 1 3.369 0c1.603.051 2.815 1.387 2.815 2.951Zm-6.136-1.452a51.196 51.196 0 0 1 3.273 0C14.39 3.05 15 3.684 15 4.478v.113a49.488 49.488 0 0 0-6 0v-.113c0-.794.609-1.428 1.364-1.452Zm-.355 5.945a.75.75 0 1 0-1.5.058l.347 9a.75.75 0 1 0 1.499-.058l-.346-9Zm5.48.058a.75.75 0 1 0-1.498-.058l-.347 9a.75.75 0 0 0 1.5.058l.345-9Z" clip-rule="evenodd"></path>
												</svg>
											</button>
										}
									</div>
								}
							</div>
						</div>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

func generateWeekTdClass(row int, col int, from string) string {
	animationClass := ""
	if strings.ToLower(from) == "prev" {
		animationClass = "animate-slide-right"
	} else if strings.ToLower(from) == "next" {
		animationClass = "animate-slide-left"
	}
	borderBottomClass := "border-b-2 "
	if row == 6 {
		borderBottomClass = ""
	} else if row == 0 {
		borderBottomClass = "border-y-2 "
	}
	if col != 0 {
		borderBottomClass += animationClass
	}
	return borderBottomClass
}

func getActiveFlagAndActiveClassWeekTd(row int, col int, calendarData [][7]time.Time, currentMonthAndYear time.Time) (bool, string) {
	active := true
	activeClass := "bg-orange-600"
	if calendarData[row][col].Month() != currentMonthAndYear.Month() || calendarData[row][col].Year() != currentMonthAndYear.Year() {
		active = false
		activeClass = "bg-orange-500"
	}
	if calendarData[row][col].Sub(time.Now()).Hours() < -24 {
		activeClass = "bg-orange-500"
		active = false
	}
	return active, activeClass
}
