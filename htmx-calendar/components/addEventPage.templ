package components

import (
	"htmx-calendar/models"
	"strconv"
	"time"
)

templ AddEventPage(calendarData [][7]time.Time, eventsData []models.EventData, date time.Time, isOob bool) {
	if !isOob {
		@layout() {
			<main
				class="relative h-dvh w-dvw overflow-y-hidden overflow-x-hidden"
				id="main"
			>
				@monthCalendar(calendarData, eventsData, date, "")
				@addEventPageModal(date, 0)
			</main>
		}
	} else {
		<main
			class="relative h-dvh w-dvw overflow-y-hidden overflow-x-hidden"
			id="main"
			hx-swap-oob="true"
		>
			@monthCalendar(calendarData, eventsData, date, "")
			@addEventPageModal(date, 0)
		</main>
	}
}

templ AddEventPageWeek(calendarData [][7]time.Time, eventsData []models.EventData, date time.Time, week int, isOob bool) {
	if !isOob {
		@layout() {
			<main
				class="relative h-dvh w-dvw overflow-y-hidden overflow-x-hidden"
				id="main"
			>
				@weekCalendar(calendarData, eventsData, date, "", week)
				@addEventPageModal(date, week)
			</main>
		}
	} else {
		<main
			class="relative h-dvh w-dvw overflow-y-hidden overflow-x-hidden"
			id="main"
			hx-swap-oob="true"
		>
			@weekCalendar(calendarData, eventsData, date, "", week)
			@addEventPageModal(date, week)
		</main>
	}
}

templ addEventPageModal(date time.Time, week int) {
	{{ mainPageUrl := "/?month=" + strconv.Itoa(int(date.Month())) + "&year=" + strconv.Itoa(date.Year()) + "&day=" + strconv.Itoa(date.Day()) }}
	if week > 0 {
		{{ mainPageUrl = "/wk?month=" + strconv.Itoa(int(date.Month())) + "&year=" + strconv.Itoa(date.Year()) + "&week=" + strconv.Itoa(week) }}
	}
	<div
		class="absolute top-0 left-0 w-full h-full bg-gray-300/50 flex items-center justify-center"
		style="view-transition-name:none"
	>
		<dialog
			class="relative animate-slide-down w-11/12 mx-auto py-2 px-4 pb-4 rounded-lg bg-white flex flex-col gap-4 md:w-9/12 lg:w-6/12 xl:w-5/12"
			open
			style="view-transition-name:modal"
			x-trap="true"
		>
			<div class="flex justify-between items-center">
				<h1 class="text-xl text-purple-600 font-semibold">Add</h1>
				<a
					href={ templ.SafeURL(mainPageUrl) }
					hx-get={ mainPageUrl }
					hx-boost="true"
					hx-swap="outerHTML transition:true"
					hx-target="main"
					hx-push-url="true"
					x-on:click="$store.data.setProcessingForFetch($event,'')"
					class="apperance-none outline-none p-1 font-semibold rounded-full text-red-600 transition duration-300 focus:ring-2 focus:ring-red-600 hover:opacity-80"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
						<path fill-rule="evenodd" d="M5.47 5.47a.75.75 0 0 1 1.06 0L12 10.94l5.47-5.47a.75.75 0 1 1 1.06 1.06L13.06 12l5.47 5.47a.75.75 0 1 1-1.06 1.06L12 13.06l-5.47 5.47a.75.75 0 0 1-1.06-1.06L10.94 12 5.47 6.53a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd"></path>
					</svg>
				</a>
			</div>
			<p class="add__result py-1 px-3 w-full" style="view-transition-name:addResult"></p>
			<form
				id="addEventForm"
				method="POST"
				action="/add"
				hx-post="/add"
				class="flex flex-col gap-4 "
				hx-trigger="ADD_EVENT"
				hx-target=".add__result"
				hx-swap="outerHTML"
				x-on:submit="$store.data.setProcessingForSubmit($event,'ADD_EVENT')"
				x-bind:disabled="$store.data.processing"
				x-data="{frequency:'Only once',exact:false,flatpickrInstance:null}"
				x-init={ ` $watch('frequency',(val)=>{
								if(this.flatpickrInstance && this.flatpickrInstance.destroy){										
									this.flatpickrInstance.destroy();
								}
								if (val!=='Only once'){
									this.flatpickrInstance=flatpickr($refs.dateInput, {
										dateFormat: 'Y-m-d',										
										minDate: '`+date.AddDate(0, 0, 1).Format("2006-01-02")+`',
										enableTime: false,
										allowInput: true,
										disableMobile: false,
										locale: {
											firstDayOfWeek: 0 // start week on Sunday
										},										
									});
								}								
							});
						` }
			>
				<fieldset class="flex flex-col gap-1">
					<label for="date" class="text-slate-600 text-lg">Date:</label>
					<input
						type="date"
						id="date"
						class="appearance-none outline-none py-2 px-4 rounded border-2 border-gray-300 transition duration-300 focus:border-gray-600"
						name="date"
						readonly
						required
						value={ date.Format("2006-01-02") }
					/>
				</fieldset>
				<fieldset class="flex flex-col gap-1">
					<label for="task" class="text-slate-600 text-lg">Task:</label>
					<input
						type="text"
						id="task"
						class="appearance-none outline-none py-2 px-4 rounded border-2 border-gray-300 transition duration-300 focus:border-gray-600"
						name="task"
						required
						autofocus
						minlength="3"
					/>
				</fieldset>
				<fieldset class="flex flex-col gap-1 w-full ">
					<label for="frequency" class="text-slate-600 text-lg">Frequency:</label>
					<div class="relative w-full">
						<select
							id="frequency"
							class="appearance-none outline-none w-full py-2 px-4 rounded border-2 border-gray-300 transition duration-300 focus:border-gray-600"
							name="frequency"
							x-model="frequency"
						>
							for _,item:= range []string{"Only once", "Daily", "Weekly", "Every two weeks", "Monthly", "Quarterly", "Half yearly","Yearly"} {
								<option value={ item }>{ item }</option>
							}
						</select>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6 absolute top-3 right-3 -z-10">
							<path fill-rule="evenodd" d="M12.53 16.28a.75.75 0 0 1-1.06 0l-7.5-7.5a.75.75 0 0 1 1.06-1.06L12 14.69l6.97-6.97a.75.75 0 1 1 1.06 1.06l-7.5 7.5Z" clip-rule="evenodd"></path>
						</svg>
					</div>
				</fieldset>
				<div
					class="flex flex-col gap-2 p-2 bg-gray-50"
					x-show="frequency!='Only once'"
					x-transition:enter="transition var(--ease-elastic-in-5) duration-300"
					x-transition:enter-start="opacity-0"
					x-transition:enter-end="opacity-100"
					x-transition:leave="transition var(--ease-elastic-in-5) duration-300"
					x-transition:leave-start="opacity-100"
					x-transition:leave-end="opacity-0"
				>
					<fieldset
						class="flex items-center gap-1 relative disabled:cursor-not-allowed disabled:bg-gray-50 "
						x-bind:disabled="frequency=='Only once'"
						x-show="frequency!='Only once' && frequency!='Daily'"
						x-transition:enter="transition var(--ease-elastic-in-5) duration-300"
						x-transition:enter-start="opacity-0"
						x-transition:enter-end="opacity-100"
						x-transition:leave="transition var(--ease-elastic-in-5) duration-300"
						x-transition:leave-start="opacity-100"
						x-transition:leave-end="opacity-0"
					>
						<input
							type="checkbox"
							id="exact"
							name="exact"
							value="yes"
							x-model="exact"
							class="w-5 h-5 border-gray-300 rounded"
						/>
						<label for="exact" class="text-slate-600 text-lg">
							<span>Use Exact Date:</span>
						</label>
					</fieldset>
					<fieldset
						class="flex flex-col gap-1 disabled:bg-gray-50 disabled:cursor-not-allowed"
						x-bind:disabled="frequency=='Only once'"
					>
						<label for="stopAfter" class="text-slate-600 text-lg flex items-start gap-1">
							Stop After:							
						</label>
						<input
							type="date"
							id="stopAfter"
							class="appearance-none outline-none py-2 px-4 rounded border-2 border-gray-300 transition duration-300 focus:border-gray-600 disabled:cursor-not-allowed"
							name="stopAfter"
							x-bind:disabled="frequency=='Only once'"
							x-ref="dateInput"
						/>
					</fieldset>
				</div>
				<button
					type="submit"
					x-bind:disabled="$store.data.processing"
					class="appearance-none outline-none cursor-pointer py-2 px-4 rounded bg-orange-600 text-white text-lg transition duration-300 hover:opacity-80 focus:ring-2 focus:ring-orange-600 focus:ring-offset-2 focus:ring-offset-orange-50 disabled:cursor-not-allowed disabled:opacity-70"
				>Submit</button>
			</form>
		</dialog>
	</div>
}

templ AddEventResult(success bool, task string) {
	if success {
		<p class="add__result animate-result py-1 px-3 w-full bg-teal-200 text-teal-600 font-semibold rounded" style="view-transition-name:addResult">
			{ "Succesfully added task "+task }
		</p>
		<script type="text/javascript">
		(()=>{
			document.getElementById('addEventForm').reset();
		})()
		</script>
		<input
			type="text"
			id="task"
			class="appearance-none outline-none py-2 px-4 rounded border-2 border-gray-300 transition duration-300 focus:border-gray-600"
			name="task"
			required
			minlength="3"
			hx-swap-oob="true"
		/>
	} else {
		<p class="add__result animate-result py-1 px-3 w-full bg-red-200 text-red-600 font-semibold rounded" style="view-transition-name:addResult">
			{ "Error adding task "+task+". Please try again later." }
		</p>
	}
}

templ AddEventValidationError(errs []string) {
	<p class="add__result flex flex-col gap-1 animate-result py-1 px-3 w-full bg-red-200 text-red-600 font-semibold rounded" style="view-transition-name:addResult">
		<span>Error!</span>
		<span class="flex flex-col">
			for _, err := range errs {
				<span>{ err }</span>
			}
		</span>
	</p>
}
