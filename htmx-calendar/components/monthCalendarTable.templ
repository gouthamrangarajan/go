package components

import (
	"htmx-calendar/models"
	"strconv"
	"strings"
	"time"
)

templ monthCalendarTable(calendarData [][7]time.Time, eventsData []models.EventData, currentMonthAndYear time.Time, from string) {
	{{ days := []string{"Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"} }}
	<table class="w-full h-full table-fixed" style="view-transition-name:calendarTable">
		<thead>
			for idx,day := range days {
				{{ class := "border-y-2 border-gray-300" }}
				if idx+1!=len(days) {
					{{ class = "border-y-2 border-r-2 border-gray-300" }}
				}
				<th class={ class }><span style={ "view-transition-name:headerDay-" + day }>{ day }</span></th>
			}
		</thead>
		<tbody>
			{{ animationClass := "" }}
			if  strings.ToLower(from) == "prev" {
				{{ animationClass = "animate-slide-right" }}
			} else if strings.ToLower(from) == "next" {
				{{ animationClass = "animate-slide-left" }}
			}
			{{ heightClass := "h-10 lg:h-18 xl:h-20" }}
			if len(calendarData) < 6 {
				{{ heightClass = "h-10 lg:h-24 xl:h-26" }}
			}
			for row := 0; row < len(calendarData); row++ {
				<tr>
					for col := 0;col < len(calendarData[row]);col++ {
						{{ tdClass := "border-b-2 border-r-2 border-gray-300 " + animationClass }}
						if col +1 == len(days) && row +1 == len(calendarData) {
							{{ tdClass = "" + animationClass }}
						} else if col + 1 == len(days) {
							{{ tdClass = "border-b-2 border-gray-300 " + animationClass }}
						} else if row +1 == len(calendarData) {
							{{ tdClass = "border-r-3 border-gray-300 " + animationClass }}
						}
						<td class={ tdClass }>
							{{ classBindExpression := "$store.data.checkDnDRowCol(" + strconv.Itoa(row) + "," + strconv.Itoa(col) + ")?'border-3 border-teal-600':'border-3 border-transparent'" }}
							<div
								class="p-1 flex flex-col w-full h-full justify-start items-start gap-1 border-dashed"
								x-bind:class={ classBindExpression }
								ondragover={ templ.JSFuncCall("setAlpineStoreDnDRowCol", templ.JSExpression("event"), row, col) }
								ondragleave={ templ.JSFuncCall("removeAlpineStoreDnDRowCol", row, col) }
								ondrop={ templ.JSFuncCall("eventDropped", templ.JSExpression("event"), calendarData[row][col].Format("2006-01-02")) }
							>
								{{ active := true }}
								{{ activeClass := "bg-orange-600" }}
								if calendarData[row][col].Month() != currentMonthAndYear.Month() || calendarData[row][col].Year()!=currentMonthAndYear.Year() || calendarData[row][col].Sub(time.Now()).Hours()< -24 {
									{{ active = false }}
									{{ activeClass = "bg-orange-500" }}
								}
								@addEventLink(calendarData[row][col], active)
								<div
									class={ "w-full overflow-x-hidden overflow-y-auto flex flex-col gap-1 rounded p-1 scrollbar-thin scrollbar-track-purple-300 scrollbar-thumb-purple-600 focus:outline-2 focus:outline-purple-600",heightClass }
									style={ "view-transition-name:items-" + calendarData[row][col].Format("2006-01-02") }
								>
									for _,event := range filterDateEvents(eventsData,calendarData[row][col]) {
										<div
											draggable={ "true" }
											data-id={ event.Id }
											ondragstart={ templ.JSFuncCall("dragStarted", templ.JSExpression("event"), event.Id) }
											class={ " text-white text-xs cursor-pointer py-1 px-3 rounded w-full truncate shrink-0 lg:text-sm",activeClass }
											style="view-transition-name:none"
										>
											// { "task " + strconv.Itoa(idx+1) }
											{ event.Task }
										</div>
									}
								</div>
							</div>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
}

func filterDateEvents(eventsData []models.EventData, date time.Time) []models.EventData {
	dateStr := date.Format("2006-01-02")
	var retValue []models.EventData

	for _, data := range eventsData {
		if data.Date == dateStr {
			retValue = append(retValue, data)
		}
	}
	return retValue
}
